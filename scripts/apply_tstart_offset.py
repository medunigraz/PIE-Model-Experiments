#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import sys
import json
import numpy
import argparse
import numpy as np

np.set_printoptions(suppress=True)

def load_times(filepath, Nvtx):
  if not os.path.exists(filepath):
    raise RuntimeError("load_times(): file not found: {}".format(filepath))
  
  file_ext = filepath[-3:]
  data = []

  if file_ext == "dat":
    data = np.loadtxt(filepath, dtype=np.float32)

    if len(data.shape) > 1:
      tmp = [[] for _ in range(Nvtx)]
      Nslices = 0

      for dpair in data:
        vtx, time = dpair
        vtx = int(vtx)
        tmp[vtx].append(time)
        Nslices = max(Nslices, len(tmp[vtx]))

      # fill missing entries
      data = -np.ones((Nvtx, Nslices))

      for vtx in range(Nvtx): 
        data[vtx,:len(tmp[vtx])] = np.sort(np.array(tmp[vtx]))
  else:
    raise RuntimeError("load_times(): invalid file extention: .{}".format(file_ext))

  if len(data.shape) == 1:
    data = data.reshape((data.shape[0], 1))

  return data

def save_times(filepath, data):
  data_list = []
  Nvtx, Ndat = data.shape

  for vtx in range(Nvtx):
    for it in range(0, Ndat):
      if data[vtx][it] >= 0.0:
        data_list.append(np.array([vtx, data[vtx][it]]))

  data_list = np.array(data_list, dtype=np.float32())
  data_list = data_list[np.lexsort((data_list[:,0], data_list[:,1]))]
  np.savetxt(filepath, data_list, fmt='%d\t%f')

# -----------------------------------------------------------------------------
def main(args):
  msh_filepath = args["msh"]
  msh_file = []

  if os.path.exists(msh_filepath):
    msh_file = msh_filepath
  elif os.path.exists("{}.bpts".format(msh_filepath)):
    msh_file = "{}.bpts".format(msh_filepath)
  elif os.path.exists("{}.pts".format(msh_filepath)):
    msh_file = "{}.pts".format(msh_filepath)
  else:
    print("error: mesh file not found: {}".format(msh_filepath))

  if msh_file[-5:] == ".bpts":
    xyz = np.fromfile(msh_file, dtype=np.float32, offset=1024)
  elif msh_file[-4:] == ".pts":
    xyz = np.loadtxt(msh_file, skiprows=1, dtype=np.float32)
  else:
    print("error: should not happen..")

  xyz = xyz.reshape((int(len(xyz)/3), 3))
  Nvtx = xyz.shape[0]
  dat_data = load_times(args["dat"], Nvtx)
  dat_data -= np.float32(args["offset"])
  save_times(args["out"], dat_data)

# -----------------------------------------------------------------------------
if __name__ == "__main__":
  parser = argparse.ArgumentParser(description='Applies tstart offset to LAT and LRT generated by openCARP.')
  parser.add_argument('--msh',    help='mesh filepath',                  required=True)
  parser.add_argument('--dat',    help='LAT or LRT file in .dat format', required=True)
  parser.add_argument('--offset', help='tstart offset in ms',            required=True)
  parser.add_argument('--out',    help='output filepath',                required=True)
  args = vars(parser.parse_args())
  main(args)